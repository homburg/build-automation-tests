// Generated by LiveScript 1.2.0
(function(){
  var path, chai, expect, exec, stat, timeout, et, getMtime, lscCmd, make;
  path = require('path');
  chai = require('chai');
  chai.use(require('chai-fs'));
  expect = chai.expect;
  exec = require('child_process').exec;
  stat = require('fs').stat;
  timeout = function(time, f){
    return setTimeout(f, time);
  };
  et = root['it'];
  getMtime = function(path, cb){
    exec("stat -c '%y' " + path, cb, function(error, stdout){});
  };
  lscCmd = __dirname + "/node_modules/.bin/lsc";
  make = function(wd, target, cb){
    target || (target = "all");
    exec("make -C " + wd + " " + target, cb);
  };
  describe("tests", function(){
    et("should run", function(){
      expect(true).to.be['true'];
    });
  });
  describe("make test", function(){
    beforeEach(function(){
      return exec("rm -f make/single/to.txt", function(error){
        expect(error).not.to.be.ok;
      });
    });
    et("should produce a single file", function(done){
      exec("make -C make/single", function(err, stdout, stderr){
        expect(err).not.to.be['false'];
        expect("make/single/to.txt").to.be.a.file();
        done();
      });
    });
    et("should not update file twice", function(done){
      exec("make -C make/single -q", function(error, stdout){
        expect(error).to.be.ok;
        expect(error.code).to.be.equal(1);
        exec("make -C make/single", function(){
          getMtime("make/single/to.txt", function(error, _mtime){
            var mtime;
            expect(error).not.to.be.ok;
            mtime = _mtime;
            expect(mtime).not.to.be.equal("");
            exec("make -C make/single", function(){
              getMtime("make/single/to.txt", function(error, _mtime){
                expect(error).not.to.be.ok;
                expect(_mtime).to.be.equal(mtime);
                done();
              });
            });
          });
        });
      });
    });
    et("should update file mtime", function(done){
      return exec("echo 'test' > out.txt", function(){
        getMtime("out.txt", function(error, _mtime){
          var mtime;
          expect(error).not.to.be.ok;
          mtime = _mtime;
          exec("echo 'test' > out.txt", function(){
            getMtime("out.txt", function(error, _mtime){
              expect(error).not.to.be.ok;
              expect(_mtime).not.to.be.equal(mtime);
              done();
            });
          });
        });
      });
    });
  });
  describe("ninja build tool", function(){
    var wd, make, conf;
    wd = "ninja/single";
    make = function(target, cb){
      return make(wd, target, cb);
    };
    conf = function(cb){
      var cmd;
      cmd = "cd " + wd + "; pwd;" + lscCmd + " configure.ls";
      exec(cmd, cb);
    };
    beforeEach(function(done){
      make("clean", function(error){
        done();
      });
    });
    et("should start with a clean slate", function(){
      expect(path.join(wd, "build.ninja")).to.not.be.a.path();
    });
    et("should convert config to a ninja build file", function(done){
      conf(function(error, stdout){
        expect(error).not.to.be.ok;
        expect(path.join(wd, "build.ninja")).to.be.a.file();
        done();
      });
    });
  });
}).call(this);
